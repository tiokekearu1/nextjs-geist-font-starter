name: Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    outputs:
      version: ${{ steps.version.outputs.value }}
    
    steps:
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "value=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "value=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "value=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          fi

  validate:
    name: Validate Deployment
    needs: prepare
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, intl, gd, xml, zip, pdo_mysql

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install dependencies
        run: |
          composer install --no-dev --optimize-autoloader
          npm ci
          npm run build

      - name: Run tests
        run: |
          composer test
          npm test

      - name: Validate configuration
        run: |
          php artisan config:clear
          php artisan config:cache --env=${{ github.event.inputs.environment || 'staging' }}
          php artisan route:cache
          php artisan view:cache

  backup:
    name: Backup Current State
    needs: [prepare, validate]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create database backup
        run: |
          mysqldump \
            -h ${{ secrets.DB_HOST }} \
            -u ${{ secrets.DB_USERNAME }} \
            -p${{ secrets.DB_PASSWORD }} \
            ${{ secrets.DB_DATABASE }} | gzip > backup.sql.gz

      - name: Upload backup to S3
        run: |
          aws s3 cp \
            backup.sql.gz \
            s3://${{ secrets.BACKUP_BUCKET }}/pre-deploy-${{ needs.prepare.outputs.version }}.sql.gz

  deploy:
    name: Deploy Application
    needs: [prepare, validate, backup]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Create release package
        run: |
          zip -r release.zip . \
            -x "node_modules/*" \
            -x ".git/*" \
            -x "tests/*" \
            -x "storage/logs/*" \
            -x "storage/cache/*"

      - name: Deploy to server
        run: |
          scp release.zip ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/releases/
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
            cd ~/releases && \
            unzip -o release.zip -d ${{ needs.prepare.outputs.version }} && \
            rm release.zip && \
            ln -sfn ${{ needs.prepare.outputs.version }} current && \
            cd current && \
            composer install --no-dev --optimize-autoloader && \
            php artisan down && \
            php artisan migrate --force && \
            php artisan config:cache && \
            php artisan route:cache && \
            php artisan view:cache && \
            php artisan up"

  verify:
    name: Verify Deployment
    needs: [prepare, deploy]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Check application health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ github.event.inputs.environment == 'production' && '' || 'staging.' }}aweacademy.com/health)
          if [ "$response" != "200" ]; then
            echo "Health check failed with status $response"
            exit 1
          fi

      - name: Run smoke tests
        run: |
          endpoints=(
            "/"
            "/api/v1/status"
            "/login"
          )
          
          for endpoint in "${endpoints[@]}"; do
            response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ github.event.inputs.environment == 'production' && '' || 'staging.' }}aweacademy.com${endpoint})
            if [ "$response" != "200" ]; then
              echo "Endpoint ${endpoint} failed with status ${response}"
              exit 1
            fi
          done

  rollback:
    name: Rollback Deployment
    needs: [prepare, deploy, verify]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    if: failure()
    
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Rollback deployment
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "
            cd ~/releases && \
            ln -sfn $(ls -t | grep -v current | head -n2 | tail -n1) current && \
            cd current && \
            php artisan down && \
            php artisan migrate:rollback --force && \
            php artisan config:cache && \
            php artisan route:cache && \
            php artisan view:cache && \
            php artisan up"

      - name: Restore database
        run: |
          aws s3 cp \
            s3://${{ secrets.BACKUP_BUCKET }}/pre-deploy-${{ needs.prepare.outputs.version }}.sql.gz \
            backup.sql.gz
          
          gunzip backup.sql.gz
          
          mysql \
            -h ${{ secrets.DB_HOST }} \
            -u ${{ secrets.DB_USERNAME }} \
            -p${{ secrets.DB_PASSWORD }} \
            ${{ secrets.DB_DATABASE }} < backup.sql

  notify:
    name: Send Notifications
    needs: [prepare, deploy, verify, rollback]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'deployments'
          slack-message: |
            Deployment Status for ${{ github.event.inputs.environment || 'staging' }}:
            
            Version: ${{ needs.prepare.outputs.version }}
            Status: ${{ needs.verify.result == 'success' && ':white_check_mark: Success' || ':x: Failed' }}
            
            ${{ needs.rollback.result == 'success' && '⚠️ Rollback performed' || '' }}
            
            Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        if: failure()
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Deployment Failed: ${{ github.event.inputs.environment || 'staging' }}"
          body: |
            Deployment to ${{ github.event.inputs.environment || 'staging' }} failed!
            
            Version: ${{ needs.prepare.outputs.version }}
            Status: Failed
            ${{ needs.rollback.result == 'success' && 'Rollback performed successfully' || 'Rollback also failed' }}
            
            Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: devops@aweacademy.com
          from: AWE Academy Deployments <deployments@aweacademy.com>
