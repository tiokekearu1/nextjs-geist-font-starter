name: Dependency Management

on:
  schedule:
    - cron: '0 0 * * 1'  # Run weekly on Mondays
  pull_request:
    paths:
      - '**/package.json'
      - '**/package-lock.json'
      - '**/composer.json'
      - '**/composer.lock'
      - '**/requirements.txt'
      - '**/poetry.lock'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        type: choice
        options:
          - all
          - security
          - major
          - minor
          - patch
      package_manager:
        description: 'Package manager to update'
        required: true
        type: choice
        options:
          - all
          - npm
          - composer
          - pip
      dry_run:
        description: 'Perform dry run only'
        required: true
        default: 'false'
        type: boolean

jobs:
  prepare:
    name: Prepare Updates
    runs-on: ubuntu-latest
    
    outputs:
      update_id: ${{ steps.generate.outputs.id }}
    
    steps:
      - name: Generate update ID
        id: generate
        run: echo "id=$(date +%Y%m%d_%H%M%S)_$RANDOM" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, xml
          coverage: none

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'

  npm:
    name: Update NPM Dependencies
    needs: prepare
    runs-on: ubuntu-latest
    if: github.event.inputs.package_manager == 'all' || github.event.inputs.package_manager == 'npm'
    
    steps:
      - name: Install dependencies
        run: npm ci

      - name: Check for updates
        id: ncu
        run: |
          npx npm-check-updates > npm-updates.txt
          echo "has_updates=$(test -s npm-updates.txt && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Update dependencies
        if: steps.ncu.outputs.has_updates == 'true' && github.event.inputs.dry_run != 'true'
        run: |
          case "${{ github.event.inputs.update_type }}" in
            "security")
              npm audit fix
              ;;
            "major")
              npx npm-check-updates -u
              npm install
              ;;
            "minor")
              npx npm-check-updates -u --target minor
              npm install
              ;;
            "patch")
              npx npm-check-updates -u --target patch
              npm install
              ;;
            *)
              npm update
              ;;
          esac

      - name: Run tests
        if: steps.ncu.outputs.has_updates == 'true' && github.event.inputs.dry_run != 'true'
        run: npm test

      - name: Generate npm report
        run: |
          echo "# NPM Dependencies Update Report" > npm-report.md
          echo "## Update ID: ${{ needs.prepare.outputs.update_id }}" >> npm-report.md
          
          echo "## Available Updates" >> npm-report.md
          cat npm-updates.txt >> npm-report.md
          
          if [[ "${{ github.event.inputs.dry_run }}" != "true" && "${{ steps.ncu.outputs.has_updates }}" == "true" ]]; then
            echo "## Updated Packages" >> npm-report.md
            npm list --json >> npm-report.md
          fi

      - name: Upload npm report
        uses: actions/upload-artifact@v3
        with:
          name: npm-report
          path: npm-report.md

  composer:
    name: Update Composer Dependencies
    needs: prepare
    runs-on: ubuntu-latest
    if: github.event.inputs.package_manager == 'all' || github.event.inputs.package_manager == 'composer'
    
    steps:
      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist

      - name: Check for updates
        id: outdated
        run: |
          composer outdated > composer-updates.txt
          echo "has_updates=$(test -s composer-updates.txt && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Update dependencies
        if: steps.outdated.outputs.has_updates == 'true' && github.event.inputs.dry_run != 'true'
        run: |
          case "${{ github.event.inputs.update_type }}" in
            "security")
              composer audit --fix
              ;;
            "major")
              composer update
              ;;
            "minor")
              composer update --minor-only
              ;;
            "patch")
              composer update --patch-only
              ;;
            *)
              composer update
              ;;
          esac

      - name: Run tests
        if: steps.outdated.outputs.has_updates == 'true' && github.event.inputs.dry_run != 'true'
        run: vendor/bin/phpunit

      - name: Generate composer report
        run: |
          echo "# Composer Dependencies Update Report" > composer-report.md
          echo "## Update ID: ${{ needs.prepare.outputs.update_id }}" >> composer-report.md
          
          echo "## Available Updates" >> composer-report.md
          cat composer-updates.txt >> composer-report.md
          
          if [[ "${{ github.event.inputs.dry_run }}" != "true" && "${{ steps.outdated.outputs.has_updates }}" == "true" ]]; then
            echo "## Updated Packages" >> composer-report.md
            composer show --format=json >> composer-report.md
          fi

      - name: Upload composer report
        uses: actions/upload-artifact@v3
        with:
          name: composer-report
          path: composer-report.md

  pip:
    name: Update Python Dependencies
    needs: prepare
    runs-on: ubuntu-latest
    if: github.event.inputs.package_manager == 'all' || github.event.inputs.package_manager == 'pip'
    
    steps:
      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Check for updates
        id: pip-check
        run: |
          pip list --outdated > pip-updates.txt
          echo "has_updates=$(test -s pip-updates.txt && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Update dependencies
        if: steps.pip-check.outputs.has_updates == 'true' && github.event.inputs.dry_run != 'true'
        run: |
          case "${{ github.event.inputs.update_type }}" in
            "security")
              pip install --upgrade pip-audit
              pip-audit --fix
              ;;
            *)
              pip install --upgrade -r requirements.txt
              ;;
          esac

      - name: Run tests
        if: steps.pip-check.outputs.has_updates == 'true' && github.event.inputs.dry_run != 'true'
        run: python -m pytest

      - name: Generate pip report
        run: |
          echo "# Python Dependencies Update Report" > pip-report.md
          echo "## Update ID: ${{ needs.prepare.outputs.update_id }}" >> pip-report.md
          
          echo "## Available Updates" >> pip-report.md
          cat pip-updates.txt >> pip-report.md
          
          if [[ "${{ github.event.inputs.dry_run }}" != "true" && "${{ steps.pip-check.outputs.has_updates }}" == "true" ]]; then
            echo "## Updated Packages" >> pip-report.md
            pip freeze >> pip-report.md
          fi

      - name: Upload pip report
        uses: actions/upload-artifact@v3
        with:
          name: pip-report
          path: pip-report.md

  analyze:
    name: Analyze Dependencies
    needs: [prepare, npm, composer, pip]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Download all reports
        uses: actions/download-artifact@v3

      - name: Generate consolidated report
        run: |
          echo "# Dependencies Update Report" > consolidated-report.md
          echo "## Update ID: ${{ needs.prepare.outputs.update_id }}" >> consolidated-report.md
          
          echo "## NPM Updates" >> consolidated-report.md
          cat npm-report/npm-report.md >> consolidated-report.md
          
          echo "## Composer Updates" >> consolidated-report.md
          cat composer-report/composer-report.md >> consolidated-report.md
          
          echo "## Python Updates" >> consolidated-report.md
          cat pip-report/pip-report.md >> consolidated-report.md

      - name: Upload consolidated report
        uses: actions/upload-artifact@v3
        with:
          name: consolidated-report
          path: consolidated-report.md

  create-pr:
    name: Create Pull Request
    needs: [prepare, analyze]
    runs-on: ubuntu-latest
    if: github.event.inputs.dry_run != 'true' && (needs.npm.result == 'success' || needs.composer.result == 'success' || needs.pip.result == 'success')
    
    steps:
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          title: 'chore(deps): update dependencies (${{ needs.prepare.outputs.update_id }})'
          body: |
            Automated dependency updates
            
            Update ID: ${{ needs.prepare.outputs.update_id }}
            Type: ${{ github.event.inputs.update_type }}
            
            See attached reports for details.
          branch: deps/update-${{ needs.prepare.outputs.update_id }}
          base: develop
          labels: dependencies
          draft: true

  notify:
    name: Send Notifications
    needs: [prepare, analyze, create-pr]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Download consolidated report
        uses: actions/download-artifact@v3
        with:
          name: consolidated-report

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'dependencies'
          slack-message: |
            :package: Dependencies Update
            
            Update ID: ${{ needs.prepare.outputs.update_id }}
            Type: ${{ github.event.inputs.update_type }}
            Mode: ${{ github.event.inputs.dry_run == 'true' && 'Dry Run' || 'Actual' }}
            
            Status:
            - NPM: ${{ needs.npm.result }}
            - Composer: ${{ needs.composer.result }}
            - Python: ${{ needs.pip.result }}
            
            ${{ needs.create-pr.result == 'success' && ':pull_request: Pull request created' || '' }}
            
            View detailed report: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Send email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Dependency Updates Failed"
          body: |
            Dependency update process has failed.
            
            Update ID: ${{ needs.prepare.outputs.update_id }}
            Type: ${{ github.event.inputs.update_type }}
            Mode: ${{ github.event.inputs.dry_run == 'true' && 'Dry Run' || 'Actual' }}
            
            Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: dev-team@aweacademy.com
          from: AWE Academy Dependencies <dependencies@aweacademy.com>
