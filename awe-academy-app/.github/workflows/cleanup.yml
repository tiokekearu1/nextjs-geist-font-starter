name: Cleanup Management

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays
  workflow_dispatch:
    inputs:
      cleanup_type:
        description: 'Type of cleanup'
        required: true
        type: choice
        options:
          - all
          - logs
          - backups
          - artifacts
          - cache
      retention_days:
        description: 'Days to retain'
        required: true
        default: '30'
        type: string
      dry_run:
        description: 'Perform dry run only'
        required: true
        default: 'true'
        type: boolean

jobs:
  prepare:
    name: Prepare Cleanup
    runs-on: ubuntu-latest
    
    outputs:
      cleanup_id: ${{ steps.generate.outputs.id }}
      cutoff_date: ${{ steps.calculate.outputs.date }}
    
    steps:
      - name: Generate cleanup ID
        id: generate
        run: echo "id=$(date +%Y%m%d_%H%M%S)_$RANDOM" >> $GITHUB_OUTPUT

      - name: Calculate cutoff date
        id: calculate
        run: |
          cutoff=$(date -u -d "${{ github.event.inputs.retention_days || 30 }} days ago" +"%Y-%m-%d")
          echo "date=$cutoff" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

  logs:
    name: Log Files Cleanup
    needs: prepare
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'all' || github.event.inputs.cleanup_type == 'logs'
    
    steps:
      - name: Analyze log files
        run: |
          # List old log files
          aws s3 ls s3://${{ secrets.LOGS_BUCKET }}/archives/ \
            --recursive \
            | awk '$1 < "${{ needs.prepare.outputs.cutoff_date }}"' \
            > old_logs.txt
          
          # Calculate space usage
          total_size=$(awk '{sum += $3} END {print sum}' old_logs.txt)
          echo "total_size=$total_size" >> $GITHUB_ENV

      - name: Clean log files
        if: github.event.inputs.dry_run != 'true'
        run: |
          while IFS= read -r line; do
            file_path=$(echo "$line" | awk '{print $4}')
            aws s3 rm "s3://${{ secrets.LOGS_BUCKET }}/$file_path"
          done < old_logs.txt

      - name: Generate logs report
        run: |
          echo "# Log Cleanup Report" > logs-report.md
          echo "## Cleanup ID: ${{ needs.prepare.outputs.cleanup_id }}" >> logs-report.md
          echo "## Cutoff Date: ${{ needs.prepare.outputs.cutoff_date }}" >> logs-report.md
          
          echo "## Statistics" >> logs-report.md
          echo "- Total Size: ${{ env.total_size }} bytes" >> logs-report.md
          echo "- Files Processed: $(wc -l < old_logs.txt)" >> logs-report.md
          
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "## Dry Run - No files were deleted" >> logs-report.md
          fi

      - name: Upload logs report
        uses: actions/upload-artifact@v3
        with:
          name: logs-report
          path: logs-report.md

  backups:
    name: Backup Files Cleanup
    needs: prepare
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'all' || github.event.inputs.cleanup_type == 'backups'
    
    steps:
      - name: Analyze backup files
        run: |
          # List old backups
          aws s3 ls s3://${{ secrets.BACKUP_BUCKET }}/ \
            --recursive \
            | awk '$1 < "${{ needs.prepare.outputs.cutoff_date }}"' \
            > old_backups.txt
          
          # Calculate space usage
          total_size=$(awk '{sum += $3} END {print sum}' old_backups.txt)
          echo "total_size=$total_size" >> $GITHUB_ENV

      - name: Clean backup files
        if: github.event.inputs.dry_run != 'true'
        run: |
          while IFS= read -r line; do
            file_path=$(echo "$line" | awk '{print $4}')
            aws s3 rm "s3://${{ secrets.BACKUP_BUCKET }}/$file_path"
          done < old_backups.txt

      - name: Generate backups report
        run: |
          echo "# Backup Cleanup Report" > backups-report.md
          echo "## Cleanup ID: ${{ needs.prepare.outputs.cleanup_id }}" >> backups-report.md
          echo "## Cutoff Date: ${{ needs.prepare.outputs.cutoff_date }}" >> backups-report.md
          
          echo "## Statistics" >> backups-report.md
          echo "- Total Size: ${{ env.total_size }} bytes" >> backups-report.md
          echo "- Files Processed: $(wc -l < old_backups.txt)" >> backups-report.md
          
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "## Dry Run - No files were deleted" >> backups-report.md
          fi

      - name: Upload backups report
        uses: actions/upload-artifact@v3
        with:
          name: backups-report
          path: backups-report.md

  artifacts:
    name: Artifact Cleanup
    needs: prepare
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'all' || github.event.inputs.cleanup_type == 'artifacts'
    
    steps:
      - name: List workflow artifacts
        id: list
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            return artifacts.data;

      - name: Clean old artifacts
        if: github.event.inputs.dry_run != 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const cutoff = new Date('${{ needs.prepare.outputs.cutoff_date }}');
            const artifacts = ${{ steps.list.outputs.result }}.artifacts;
            
            for (const artifact of artifacts) {
              if (new Date(artifact.created_at) < cutoff) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
              }
            }

      - name: Generate artifacts report
        run: |
          echo "# Artifacts Cleanup Report" > artifacts-report.md
          echo "## Cleanup ID: ${{ needs.prepare.outputs.cleanup_id }}" >> artifacts-report.md
          echo "## Cutoff Date: ${{ needs.prepare.outputs.cutoff_date }}" >> artifacts-report.md
          
          echo "## Statistics" >> artifacts-report.md
          echo "- Total Artifacts: ${{ fromJSON(steps.list.outputs.result).total_count }}" >> artifacts-report.md
          
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "## Dry Run - No artifacts were deleted" >> artifacts-report.md
          fi

      - name: Upload artifacts report
        uses: actions/upload-artifact@v3
        with:
          name: artifacts-report
          path: artifacts-report.md

  cache:
    name: Cache Cleanup
    needs: prepare
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'all' || github.event.inputs.cleanup_type == 'cache'
    
    steps:
      - name: List cache entries
        id: list
        uses: actions/github-script@v6
        with:
          script: |
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            return caches.data;

      - name: Clean old cache
        if: github.event.inputs.dry_run != 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const cutoff = new Date('${{ needs.prepare.outputs.cutoff_date }}');
            const caches = ${{ steps.list.outputs.result }}.actions_caches;
            
            for (const cache of caches) {
              if (new Date(cache.created_at) < cutoff) {
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id
                });
              }
            }

      - name: Generate cache report
        run: |
          echo "# Cache Cleanup Report" > cache-report.md
          echo "## Cleanup ID: ${{ needs.prepare.outputs.cleanup_id }}" >> cache-report.md
          echo "## Cutoff Date: ${{ needs.prepare.outputs.cutoff_date }}" >> cache-report.md
          
          echo "## Statistics" >> cache-report.md
          echo "- Total Cache Entries: ${{ fromJSON(steps.list.outputs.result).total_count }}" >> cache-report.md
          
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "## Dry Run - No cache entries were deleted" >> cache-report.md
          fi

      - name: Upload cache report
        uses: actions/upload-artifact@v3
        with:
          name: cache-report
          path: cache-report.md

  report:
    name: Generate Cleanup Report
    needs: [prepare, logs, backups, artifacts, cache]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Download all reports
        uses: actions/download-artifact@v3

      - name: Generate consolidated report
        run: |
          echo "# Cleanup Report" > consolidated-report.md
          echo "## Cleanup ID: ${{ needs.prepare.outputs.cleanup_id }}" >> consolidated-report.md
          echo "## Cutoff Date: ${{ needs.prepare.outputs.cutoff_date }}" >> consolidated-report.md
          
          echo "## Log Cleanup" >> consolidated-report.md
          cat logs-report/logs-report.md >> consolidated-report.md
          
          echo "## Backup Cleanup" >> consolidated-report.md
          cat backups-report/backups-report.md >> consolidated-report.md
          
          echo "## Artifact Cleanup" >> consolidated-report.md
          cat artifacts-report/artifacts-report.md >> consolidated-report.md
          
          echo "## Cache Cleanup" >> consolidated-report.md
          cat cache-report/cache-report.md >> consolidated-report.md

      - name: Upload consolidated report
        uses: actions/upload-artifact@v3
        with:
          name: consolidated-report
          path: consolidated-report.md

  notify:
    name: Send Notifications
    needs: [prepare, report]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Download consolidated report
        uses: actions/download-artifact@v3
        with:
          name: consolidated-report

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'cleanup'
          slack-message: |
            :broom: Cleanup Operation Complete
            
            Cleanup ID: ${{ needs.prepare.outputs.cleanup_id }}
            Type: ${{ github.event.inputs.cleanup_type || 'all' }}
            Cutoff Date: ${{ needs.prepare.outputs.cutoff_date }}
            Mode: ${{ github.event.inputs.dry_run == 'true' && 'Dry Run' || 'Actual' }}
            
            Status:
            - Logs: ${{ needs.logs.result }}
            - Backups: ${{ needs.backups.result }}
            - Artifacts: ${{ needs.artifacts.result }}
            - Cache: ${{ needs.cache.result }}
            
            View detailed report: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Cleanup Operation Complete"
          body: file://consolidated-report.md
          to: ops@aweacademy.com
          from: AWE Academy Cleanup <cleanup@aweacademy.com>
