name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1-5'  # Run at 2 AM UTC Monday-Friday

jobs:
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, intl, gd, xml, zip, pdo_mysql
          tools: phpstan, psalm, php-cs-fixer

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install dependencies
        run: |
          composer install --prefer-dist --no-progress
          npm ci

      - name: Run PHPStan
        run: phpstan analyse src tests modules --level=max

      - name: Run Psalm
        run: psalm --show-info=true

      - name: Run PHP CS Fixer
        run: php-cs-fixer fix --dry-run --diff

      - name: Run ESLint
        run: npm run lint

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.0', '8.1']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: awe_academy_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, intl, gd, xml, zip, pdo_mysql
          coverage: xdebug

      - name: Install PHP dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run PHP Unit Tests
        run: |
          ./vendor/bin/phpunit --coverage-clover coverage.xml
          bash <(curl -s https://codecov.io/bash)

      - name: Run JavaScript Unit Tests
        run: |
          npm ci
          npm test -- --coverage

  integration-tests:
    name: Integration Tests
    needs: unit-tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: awe_academy_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, intl, gd, xml, zip, pdo_mysql

      - name: Install dependencies
        run: |
          composer install --prefer-dist --no-progress
          npm ci

      - name: Run database migrations
        run: php artisan migrate --env=testing

      - name: Run Integration Tests
        run: ./vendor/bin/phpunit --testsuite=Integration

  e2e-tests:
    name: End-to-End Tests
    needs: integration-tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Build frontend
        run: npm run build

      - name: Start application
        run: |
          php artisan serve &
          sleep 5

      - name: Run E2E Tests
        run: npm run test:e2e

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            playwright-report/
            test-results/

  performance-tests:
    name: Performance Tests
    needs: e2e-tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load tests
        run: k6 run tests/performance/load-test.js

      - name: Run stress tests
        run: k6 run tests/performance/stress-test.js

  report:
    name: Generate Test Report
    needs: [static-analysis, unit-tests, integration-tests, e2e-tests, performance-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Download test results
        uses: actions/download-artifact@v3
        with:
          name: test-results

      - name: Generate report
        run: |
          echo "# Test Results Summary" > test-report.md
          echo "## Status" >> test-report.md
          echo "- Static Analysis: ${{ needs.static-analysis.result }}" >> test-report.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-report.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-report.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-report.md
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-report.md

      - name: Upload report
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test-report.md

      - name: Send notification
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'test-alerts'
          slack-message: 'Test suite failed! :x: Check details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
